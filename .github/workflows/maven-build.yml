name: Build, Release, Test, and Archive Minigames Plugin JAR

permissions:
  contents: write

on:
  push:
    branches:
      - main

jobs:
  # Build and publish release
  build:
    runs-on: ubuntu-latest
    outputs:
      jar-path: ${{ steps.find_jar.outputs.artifact_path }}
      jar-name: ${{ steps.find_jar.outputs.artifact_name }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 21 & enable Maven cache
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Build with Maven
        run: mvn --batch-mode clean package

      - name: Find built JAR
        id: find_jar
        run: |
          JAR_PATH=$(ls target/minigames-plugin-*.jar | head -n1)
          echo "artifact_path=$JAR_PATH" >> $GITHUB_OUTPUT
          echo "artifact_name=$(basename \"$JAR_PATH\")" >> $GITHUB_OUTPUT

      - name: Upload plugin JAR for downstream jobs
        uses: actions/upload-artifact@v4
        with:
          name: plugin-jar
          path: ${{ steps.find_jar.outputs.artifact_path }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.sha }}
          release_name: Release v${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload built JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_jar.outputs.artifact_path }}
          asset_name: ${{ steps.find_jar.outputs.artifact_name }}
          asset_content_type: application/java-archive

      - name: Compute diff stats
        id: stats
        run: |
          STATS=$(git diff --shortstat ${{ github.sha }}~1 ${{ github.sha }})
          ADD=$(echo "$STATS" | grep -oE '[0-9]+ insertion' | grep -oE '[0-9]+' || echo 0)
          DEL=$(echo "$STATS" | grep -oE '[0-9]+ deletion'  | grep -oE '[0-9]+' || echo 0)
          echo "additions=$ADD" >> $GITHUB_OUTPUT
          echo "deletions=$DEL" >> $GITHUB_OUTPUT

      - name: Notify Discord
        if: always()
        env:
          WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          REPO="${{ github.repository }}"
          SHA="${{ github.sha }}"
          TAG="v${SHA}"
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          ADD="${{ steps.stats.outputs.additions }}"
          DEL="${{ steps.stats.outputs.deletions }}"
          RELEASE_URL="https://github.com/${REPO}/releases/tag/${TAG}"

          cat <<EOF > payload.json
          {
            "embeds": [{
              "title": "New Release: ${TAG}",
              "description": "${COMMIT_MSG}",
              "url": "${RELEASE_URL}",
              "color": 5620992,
              "fields": [
                { "name": "Lines Added",   "value": "${ADD}", "inline": true },
                { "name": "Lines Removed", "value": "${DEL}", "inline": true }
              ]
            }],
            "components": [{
              "type": 1,
              "components": [{
                "type": 2,
                "style": 5,
                "label": "View Release",
                "url": "${RELEASE_URL}"
              }]
            }]
          }
          EOF

          curl -X POST "$WEBHOOK_URL" \
               -H "Content-Type: application/json" \
               --data @payload.json
